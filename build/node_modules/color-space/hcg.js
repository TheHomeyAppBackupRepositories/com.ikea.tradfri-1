/**
 * @module color-space/hcg
 */

'use strict';

const mod = require('mumath/mod');
const rgb = require('./rgb');
const hsl = require('./hsl');
const hsv = require('./hsv');
const hwb = require('./hwb');


module.exports = {
  name: 'hcg',
  min: [0, 0, 0],
  max: [360, 100, 100],
  channel: ['hue', 'chroma', 'gray'],
  alias: ['HCG', 'HSG'],

  rgb(hcg) {
    const h = hcg[0] / 360;
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    if (c === 0.0) {
      return [g * 255, g * 255, g * 255];
    }
    const hi = mod(h, 1) * 6;
    const v = mod(hi, 1);
    const pure = [0, 0, 0];
    const w = 1 - v;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1; pure[1] = v; pure[2] = 0; break;
      case 1:
        pure[0] = w; pure[1] = 1; pure[2] = 0; break;
      case 2:
        pure[0] = 0; pure[1] = 1; pure[2] = v; break;
      case 3:
        pure[0] = 0; pure[1] = w; pure[2] = 1; break;
      case 4:
        pure[0] = v; pure[1] = 0; pure[2] = 1; break;
      default:
        pure[0] = 1; pure[1] = 0; pure[2] = w;
    }
    const mg = (1.0 - c) * g;
    const rgb = [
      (c * pure[0] + mg) * 255,
      (c * pure[1] + mg) * 255,
      (c * pure[2] + mg) * 255,
    ];
    return rgb;
  },

  hsl(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const l = g * (1.0 - c) + 0.5 * c;
    let s = 0;
    if (l < 1.0 && l > 0.0) {
      if (l < 0.5) {
        s = c / (2 * l);
      } else {
        s = c / (2 * (1 - l));
      }
    }
    return [hcg[0], s * 100, l * 100];
  },

  hsv(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c + g * (1.0 - c);
    let res;
    if (v > 0.0) {
      const f = c / v;
      res = [hcg[0], f * 100, v * 100];
    } else {
      res = [hcg[0], 0, v * 100];
    }
    return res;
  },

  hwb(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c + g * (1.0 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  },
};


// append rgb
rgb.hcg = function(rgb) {
  const r = rgb[0] / 255;
  const g = rgb[1] / 255;
  const b = rgb[2] / 255;
  const max = Math.max(Math.max(r, g), b);
  const min = Math.min(Math.min(r, g), b);
  const chroma = (max - min);
  let grayscale;
  let hue;
  if (chroma < 1) {
    grayscale = min / (1 - chroma);
  } else {
    grayscale = 0;
  }
  if (chroma > 0) {
    if (max === r) {
      hue = mod((g - b) / chroma, 6);
    } else
    if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma;
    }
    hue /= 6;
    hue = mod(hue, 1);
  } else {
    hue = 0;
  }
  return [hue * 360, chroma * 100, grayscale * 100];
};

// extend hsl
hsl.hcg = function(hsl) {
  const s = hsl[1] / 100;
  const l = hsl[2] / 100;
  let c = 0;
  if (l < 0.5) {
    c = 2.0 * s * l;
  } else {
    c = 2.0 * s * (1.0 - l);
  }
  let res;
  if (c < 1.0) {
    const f = (l - 0.5 * c) / (1.0 - c);
    res = [hsl[0], c * 100, f * 100];
  } else {
    res = [hsl[0], c * 100, 0];
  }
  return res;
};

// extend hsv
hsv.hcg = function(hsv) {
  const s = hsv[1] / 100;
  const v = hsv[2] / 100;
  const c = s * v;
  let res;
  if (c < 1.0) {
    const f = (v - c) / (1 - c);
    res = [hsv[0], c * 100, f * 100];
  } else {
    res = [hsv[0], c * 100, 0];
  }
  return res;
};


// extend hwb
hwb.hcg = function(hwb) {
  const w = hwb[1] / 100;
  const b = hwb[2] / 100;
  const v = 1 - b;
  const c = v - w;
  let g = 0;
  if (c < 1) {
    g = (v - c) / (1 - c);
  }
  return [hwb[0], c * 100, g * 100];
};
