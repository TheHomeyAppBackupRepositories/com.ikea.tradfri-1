/**
 * OSA-UCS
 *
 * @module  color-space/osa-ucs
 */

'use strict';

const xyz = require('./xyz');


const osaucs = {
  name: 'osaucs',
  alias: ['OSA-UCS'],
  channel: ['L', 'j', 'g'],
  min: [-10, -6, -10],
  max: [8, 12, 6],
};


/**
 * Thereâ€™s no analytical solution to this
 */
osaucs.xyz = function(arg) {
  let x; let y; let
    z;

  throw 'Unimplemented';
  // http://www.researchgate.net/publication/259253763_Comparison_of_the_performance_of_inverse_transformation_methods_from_OSA-UCS_to_CIEXYZ

  return [x, y, z];
};


/**
 * Transform to xyz osaucs
 *
 * @param {Array} arg Input xyz array
 *
 * @return {Array} Ljg array
 */
xyz.osaucs = function(arg) {
  const X = arg[0]; const Y = arg[1]; const
    Z = arg[2];

  const x = X / (X + Y + Z);
  const y = Y / (X + Y + Z);

  // FIXME: there might be a typo, wiki states 1.8103 as a constant value
  const K = 4.4934 * x * x + 4.3034 * y * y - 4.276 * x * y - 1.3744 * x - 2.56439 * y + 1.8103;
  const Y0 = K * Y;

  const L_ = 5.9 * (Math.pow(Y0, 1 / 3) - 2 / 3 + 0.042 * Math.pow(Math.max(Y0, 30) - 30, 1 / 3));
  const L = (L_ - 14.3993) / Math.sqrt(2);

  const C = L_ / (5.9 * (Math.pow(Y0, 1 / 3) - 2 / 3));

  let R = 0.7790 * X + 0.4194 * Y - 0.1648 * Z;
  let G = -0.4493 * X + 1.3265 * Y + 0.0927 * Z;
  let B = -0.1149 * X + 0.3394 * Y + 0.7170 * Z;

  R = Math.pow(R, 1 / 3) || 0;
  G = Math.pow(G, 1 / 3) || 0;
  B = Math.pow(B, 1 / 3) || 0;

  const a = -13.7 * R + 17.7 * G - 4 * B;
  const b = 1.7 * R + 8 * G - 9.7 * B;

  const g = C * a;
  const j = C * b;

  // polar form
  // var p = Math.sqrt(j*j + g*g);
  // var phi = Math.atan2(j, g);

  return [L, j, g];
};


module.exports = osaucs;
